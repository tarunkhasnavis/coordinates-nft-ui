{"ast":null,"code":"var _jsxFileName = \"/Users/tarun/Desktop/Dev/coordinates-nft-ui/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./styles/App.css\";\nimport { ethers } from \"ethers\";\nimport myEpicNFT from \"./utils/MyEpicNFT.json\"; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OPENSEA_LINK = \"\";\nconst TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0x3d1d6276Cb4adfAc90d997C27766072C2FF9C1B1\";\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [currentMint, setCurrentMint] = useState(0); // Implicitly connect wallet upon page load\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(window);\n      console.log(\"Make sure you have metamask.\");\n      return;\n    }\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  }; // Explicitly connect wallet using button\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      /*\n      * Fancy method to request access to account.\n      */\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      /*\n      * Boom! This should print out public address once we authorize Metamask.\n      */\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Check mint count\n\n\n  const checkMintCount = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(window);\n        console.log(\"Make sure you have metamask.\");\n        return;\n      }\n\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNFT.abi, provider);\n      let mintCount = await connectedContract.getTotalMintedSoFar();\n      setCurrentMint(mintCount.toNumber());\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Setup our listener.\n\n\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNFT.abi, signer); // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Mint NFT Button Action\n\n\n  const askContractToMintNFT = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNFT.abi, signer);\n        console.log(\"Let try to mint an NFT\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        console.log(\"Mining... please wait\");\n        await nftTxn.wait();\n        provider.on(\"NewEpicNFTMint\", (sender, tokenId) => {\n          console.log(sender, tokenId.toNumber());\n          alert(`Hey there! We've minted your NFT. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: <https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}>`);\n        });\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Render Methods\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n\n  const renderMintUI = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: askContractToMintNFT,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Mint NFT\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n  /*\n   * This runs our function when the page loads.\n   */\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    checkMintCount();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"Coordinates NFT Collection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Get unique coordinates. Discover your NFT today.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: [currentMint, \"/50 Minted So Far!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUI()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"89ZSHMs/pjmYFV01sMEfInA89Z4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tarun/Desktop/Dev/coordinates-nft-ui/src/App.js"],"names":["React","useEffect","useState","ethers","myEpicNFT","OPENSEA_LINK","TOTAL_MINT_COUNT","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","currentMint","setCurrentMint","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","setupEventListener","connectWallet","alert","error","checkMintCount","provider","providers","Web3Provider","connectedContract","Contract","abi","mintCount","getTotalMintedSoFar","toNumber","signer","getSigner","on","from","tokenId","askContractToMintNFT","nftTxn","makeAnEpicNFT","wait","sender","renderNotConnectedContainer","renderMintUI"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./styles/App.css\";\nimport { ethers } from \"ethers\";\nimport myEpicNFT from \"./utils/MyEpicNFT.json\";\n\n// Constants\nconst OPENSEA_LINK = \"\";\nconst TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0x3d1d6276Cb4adfAc90d997C27766072C2FF9C1B1\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [currentMint, setCurrentMint] = useState(0);\n\n  // Implicitly connect wallet upon page load\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n    if (!ethereum) {\n      console.log(window);\n      console.log(\"Make sure you have metamask.\");\n      return;\n    }\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account)\n\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\")\n    }\n  };\n\n  // Explicitly connect wallet using button\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      /*\n      * Fancy method to request access to account.\n      */\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n      /*\n      * Boom! This should print out public address once we authorize Metamask.\n      */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n\n      setupEventListener()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Check mint count\n  const checkMintCount = async () => {\n    try  {\n      const { ethereum } = window;\n      if (!ethereum) {\n        console.log(window);\n        console.log(\"Make sure you have metamask.\");\n        return;\n      }\n\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNFT.abi, provider);\n\n      let mintCount = await connectedContract.getTotalMintedSoFar();\n      setCurrentMint(mintCount.toNumber());\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNFT.abi, signer);\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\")\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Mint NFT Button Action\n  const askContractToMintNFT = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum)\n        const signer = provider.getSigner();\n\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNFT.abi, signer);\n        \n        console.log(\"Let try to mint an NFT\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n\n        console.log(\"Mining... please wait\");\n        await nftTxn.wait();\n\n        provider.on(\"NewEpicNFTMint\", (sender, tokenId) => {\n          console.log(sender, tokenId.toNumber());\n          alert(`Hey there! We've minted your NFT. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: <https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}>`)\n        })\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      } \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUI = () => (\n    <button onClick={askContractToMintNFT} className=\"cta-button connect-wallet-button\">\n      Mint NFT\n    </button>\n  );\n\n  /*\n   * This runs our function when the page loads.\n   */\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    checkMintCount();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Coordinates NFT Collection</p>\n          <p className=\"sub-text\">\n            Get unique coordinates. Discover your NFT today.\n          </p>\n          <p className=\"sub-text\">{currentMint}/50 Minted So Far!</p>\n          {currentAccount === \"\" ? (renderNotConnectedContainer()) : (renderMintUI())}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}